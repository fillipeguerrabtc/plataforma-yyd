Voc√™ √© o Replit AI. Execute, sem perguntas, o seguinte plano detalhado:

Objetivo:
1Ô∏è‚É£ Garantir que TODO racioc√≠nio e IA passem pelo C√©rebro Proxy (REASON_PROXY_URL).
2Ô∏è‚É£ Travar o Replit contra qualquer uso direto de IA (sem tokens nem custos aqui).
3Ô∏è‚É£ Adicionar monitoramento em tempo real de tokens e custo do Proxy.
4Ô∏è‚É£ Adicionar hist√≥rico de telemetria (tokens, custo, rotas, apps) em banco SQLite.
5Ô∏è‚É£ Gerar dashboard visual no Backoffice (/ops/metrics) e relat√≥rios di√°rios.

////////////////////////////////////////////////////////////////////////////////////////////////////
// 0) PREMISSAS
////////////////////////////////////////////////////////////////////////////////////////////////////
// - O monorepo yyd/ foi criado (PROMPT A OK).
// - O Proxy j√° roda e tem REASON_PROXY_URL nos Secrets.
// - N√£o imprimir segredos.

////////////////////////////////////////////////////////////////////////////////////////////////////
// 1) TRAVAS ANTI-CUSTO DE IA (GUARD + NET-GUARD)
////////////////////////////////////////////////////////////////////////////////////////////////////
// Atualize tools/guard/scan.js para bloquear 'openai' e 'api.openai.com' (como no prompt anterior).
// Crie yyd/tools/net-guard/runtime-block.mjs para bloquear qualquer fetch/http/https a dom√≠nios openai.
// Importe esse m√≥dulo no bootstrap de todos os apps (backoffice, client, aurora-service).

////////////////////////////////////////////////////////////////////////////////////////////////////
// 2) TELEMETRIA LOCAL: BANCO HIST√ìRICO (SQLite)
////////////////////////////////////////////////////////////////////////////////////////////////////
// Criar um DB SQLite local em yyd/telemetry/telemetry.db com tabelas:

CREATE TABLE metrics_history (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
  app TEXT,
  route TEXT,
  calls INTEGER,
  prompt_tokens INTEGER,
  completion_tokens INTEGER,
  est_cost_total REAL
);

CREATE TABLE daily_summary (
  date TEXT PRIMARY KEY,
  total_calls INTEGER,
  total_tokens INTEGER,
  total_cost REAL
);

////////////////////////////////////////////////////////////////////////////////////////////////////
// 3) COLETOR AUTOM√ÅTICO DE M√âTRICAS DO PROXY
////////////////////////////////////////////////////////////////////////////////////////////////////
// Criar script yyd/telemetry/collector.mjs que:
import fetch from "node-fetch";
import Database from "better-sqlite3";
const db = new Database("./yyd/telemetry/telemetry.db");
const PROXY_URL = process.env.REASON_PROXY_URL;

async function collect() {
  try {
    const r = await fetch(`${PROXY_URL}/metrics`);
    const m = await r.json();
    db.prepare("INSERT INTO metrics_history (app, route, calls, prompt_tokens, completion_tokens, est_cost_total) VALUES (?,?,?,?,?,?)")
      .run("proxy", "reason", m.calls, m.prompt_tokens, m.completion_tokens, m.est_cost_total);
    db.prepare(`
      INSERT INTO daily_summary (date, total_calls, total_tokens, total_cost)
      VALUES (date('now'), ?, ?, ?)
      ON CONFLICT(date) DO UPDATE SET
        total_calls = total_calls + excluded.total_calls,
        total_tokens = total_tokens + excluded.total_tokens,
        total_cost  = total_cost  + excluded.total_cost;
    `).run(m.calls, m.prompt_tokens + m.completion_tokens, m.est_cost_total);
    console.log("üìä M√©tricas registradas:", new Date().toISOString());
  } catch(e) {
    console.error("Erro ao coletar m√©tricas:", e.message);
  }
}
setInterval(collect, 30000); // coleta a cada 30s

// Adicionar script no package.json raiz: "telemetry": "node yyd/telemetry/collector.mjs"
// Rodar em paralelo com "pnpm dev" no background.

////////////////////////////////////////////////////////////////////////////////////////////////////
// 4) DASHBOARD NO BACKOFFICE ‚Äî /ops/metrics
////////////////////////////////////////////////////////////////////////////////////////////////////
// Em apps/backoffice/src/app/ops/metrics/page.tsx:
// - Use server action para ler diretamente de yyd/telemetry/telemetry.db.
// - Mostre cards: calls, tokens, custo total.
// - Adicione gr√°fico temporal (chart.js) com hist√≥rico (√∫ltimas 24h).
// - Mostre compara√ß√£o di√°ria (delta vs. ontem).
// - Badge verde ‚ÄúUSING C√âREBRO PROXY ‚úÖ‚Äù se o proxy responde OK.
// - Badge vermelha ‚ÄúOPENAI DIRECT: BLOCKED üîí‚Äù se net-guard ativo.
// - Auto-refresh a cada 5s.

////////////////////////////////////////////////////////////////////////////////////////////////////
// 5) DASHBOARD HIST√ìRICO ‚Äî /ops/analytics
////////////////////////////////////////////////////////////////////////////////////////////////////
// Nova rota no Backoffice:
// - Consulta tabela daily_summary.
// - Renderiza gr√°fico de barras por dia (calls, tokens, custo total).
// - Gr√°fico de pizza com percentual de uso por rota/app (baseado em metrics_history.app e .route).
// - Adicione tabela detalhada export√°vel (CSV).
// - Permitir filtro por data e app (proxy, backoffice, aurora).

////////////////////////////////////////////////////////////////////////////////////////////////////
// 6) SELF-CHECK ‚Äî PROVA DE DEPEND√äNCIA
////////////////////////////////////////////////////////////////////////////////////////////////////
// Criar rota /ops/self-check:
// - Executa reason("classify_msg",{source:"ops",text:"ping"}) via proxy-sdk.
// - Exibe JSON de resposta.
// - Em seguida tenta fetch("https://api.openai.com/v1/models") e espera erro ‚Äúblocked by runtime net-guard‚Äù.
// - Exibe resultado dos dois testes.

////////////////////////////////////////////////////////////////////////////////////////////////////
// 7) TESTE CONTROLADO DE ECONOMIA
////////////////////////////////////////////////////////////////////////////////////////////////////
// - Ler /metrics BEFORE, salvar JSON.
// - Executar node yyd/scripts/proxy-smoke.mjs 5x.
// - Ler /metrics AFTER, salvar JSON.
// - Calcular deltas (calls, tokens, custo).
// - Registrar tamb√©m os dados hist√≥ricos da tabela metrics_history.
// - Verificar no dashboard que custo e tokens aumentam APENAS no Proxy (nunca no Replit).

////////////////////////////////////////////////////////////////////////////////////////////////////
// 8) RELAT√ìRIO FINAL AUTOM√ÅTICO
////////////////////////////////////////////////////////////////////////////////////////////////////
// Criar script yyd/telemetry/report.mjs que:
import Database from "better-sqlite3";
const db = new Database("./yyd/telemetry/telemetry.db");
const summary = db.prepare("SELECT * FROM daily_summary ORDER BY date DESC LIMIT 7").all();
console.log("üìÜ Relat√≥rio de 7 dias:");
for (const s of summary)
  console.log(`${s.date}: ${s.total_calls} calls | ${s.total_tokens} tokens | ‚Ç¨${s.total_cost.toFixed(6)} total`);

////////////////////////////////////////////////////////////////////////////////////////////////////
// 9) SA√çDA FINAL ESPERADA
////////////////////////////////////////////////////////////////////////////////////////////////////
// - Guard OK (sem openai).
// - net-guard ativo.
// - Proxy responde /metrics.
// - /ops/metrics exibe m√©tricas em tempo real.
// - /ops/analytics exibe hist√≥ricos e comparativos di√°rios.
// - /ops/self-check prova depend√™ncia e bloqueio.
// - /telemetry/report mostra custo di√°rio concentrado no Proxy (economia real no Replit).
// - Nenhuma chamada a api.openai.com permitida no ambiente Replit.
// - Tokens e custo vis√≠veis apenas via Proxy (/metrics).

////////////////////////////////////////////////////////////////////////////////////////////////////
// 10) ENCERRAMENTO
////////////////////////////////////////////////////////////////////////////////////////////////////
- Ap√≥s concluir TUDO e verificar no dashboard que as m√©tricas e relat√≥rios est√£o funcionando,
  responda EXATAMENTE:
PROMPT INTERMEDI√ÅRIO OK ‚Äî pronto para receber o PROMPT B.