generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  email        String    @unique @db.VarChar(255)
  name         String    @db.VarChar(255)
  passwordHash String    @db.VarChar(255)
  role         UserRole  @default(guide)
  active       Boolean   @default(true)
  lastLoginAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([email])
  @@index([role])
}

model Product {
  id            String               @id @default(cuid())
  slug          String               @unique
  titleEn       String
  titlePt       String
  titleEs       String
  descriptionEn String
  descriptionPt String
  descriptionEs String
  durationHours Int
  maxGroupSize  Int                  @default(6)
  categoryEn    String
  categoryPt    String
  categoryEs    String
  featuresEn    String[]
  featuresPt    String[]
  featuresEs    String[]
  excludedEn    String[]
  excludedPt    String[]
  excludedEs    String[]
  imageUrls     String[]
  highlightedEn String?
  highlightedPt String?
  highlightedEs String?
  bestChoice    Boolean              @default(false)
  active        Boolean              @default(true)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  availability  AvailabilitySlot[]
  bookings      Booking[]
  activities    ProductActivity[]
  options       ProductOption[]
  seasonPrices  ProductSeasonPrice[]

  @@map("products")
}

model ProductSeasonPrice {
  id             String   @id @default(cuid())
  productId      String
  season         String
  startMonth     Int
  endMonth       Int
  tier           String
  minPeople      Int
  maxPeople      Int?
  priceEur       Decimal  @db.Decimal(10, 2)
  pricePerPerson Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  product        Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, season, tier])
  @@index([productId])
  @@map("product_season_prices")
}

model ProductOption {
  id            String   @id @default(cuid())
  productId     String
  nameEn        String
  namePt        String
  nameEs        String
  descriptionEn String
  descriptionPt String
  descriptionEs String
  sortOrder     Int      @default(0)
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@map("product_options")
}

model ProductActivity {
  id            String   @id @default(cuid())
  productId     String
  nameEn        String
  namePt        String
  nameEs        String
  descriptionEn String
  descriptionPt String
  descriptionEs String
  imageUrl      String?
  sortOrder     Int      @default(0)
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@map("product_activities")
}

model AvailabilitySlot {
  id          String   @id @default(cuid())
  productId   String
  date        DateTime
  startTime   String
  endTime     String
  maxSlots    Int      @default(1)
  bookedSlots Int      @default(0)
  status      String   @default("available")
  guideId     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  guide       Guide?   @relation(fields: [guideId], references: [id])
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, date, startTime])
  @@index([productId, date])
  @@index([guideId])
  @@map("availability_slots")
}

model Booking {
  id                  String         @id @default(cuid())
  bookingNumber       String         @unique
  customerId          String
  productId           String
  date                DateTime
  startTime           String
  numberOfPeople      Int
  selectedOption      String?
  selectedActivities  String[]
  status              String         @default("pending")
  season              String
  priceEur            Decimal        @db.Decimal(10, 2)
  addonsTotal         Decimal        @default(0) @db.Decimal(10, 2)
  currency            String         @default("EUR")
  locale              String         @default("en")
  pickupLocation      String?
  dropoffLocation     String?
  specialRequests     String?
  guideId             String?
  guideApprovalStatus String?        @default("pending")
  guideApprovedAt     DateTime?
  guideObservations   String?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  confirmedAt         DateTime?
  completedAt         DateTime?
  cancelledAt         DateTime?
  selectedAddons      BookingAddon[]
  customer            Customer       @relation(fields: [customerId], references: [id])
  guide               Guide?         @relation(fields: [guideId], references: [id])
  product             Product        @relation(fields: [productId], references: [id])
  messages            Message[]
  payments            Payment[]
  reviews             Review?

  @@index([customerId])
  @@index([productId])
  @@index([date])
  @@index([status])
  @@index([guideId])
  @@index([guideApprovalStatus])
  @@map("bookings")
}

model Payment {
  id                  String    @id @default(cuid())
  bookingId           String
  stripePaymentIntent String?   @unique
  stripeChargeId      String?
  amount              Decimal   @db.Decimal(10, 2)
  currency            String    @default("EUR")
  status              String    @default("pending")
  paymentMethod       String?
  metadata            Json?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  paidAt              DateTime?
  refundedAt          DateTime?
  booking             Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId])
  @@index([stripePaymentIntent])
  @@index([status])
  @@map("payments")
}

model Customer {
  id                 String                  @id @default(cuid())
  name               String
  email              String                  @unique
  phone              String?
  whatsapp           String?
  locale             String                  @default("en")
  country            String?
  source             String?
  tags               String[]
  notes              String?
  totalBookings      Int                     @default(0)
  totalSpent         Decimal                 @default(0) @db.Decimal(10, 2)
  lastBookingAt      DateTime?
  leadStatus         String                  @default("lead")
  leadScore          Int                     @default(0)
  assignedTo         String?
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  accountsReceivable AccountsReceivable[]
  bookings           Booking[]
  auth               CustomerAuth?
  messages           Message[]
  segmentMemberships CustomerSegmentMember[]

  @@index([email])
  @@index([phone])
  @@index([leadStatus])
  @@map("customers")
}

model CustomerSegment {
  id          String                  @id @default(cuid())
  name        String
  description String?
  filters     Json
  autoUpdate  Boolean                 @default(true)
  active      Boolean                 @default(true)
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  members     CustomerSegmentMember[]

  @@map("customer_segments")
}

model CustomerSegmentMember {
  id         String          @id @default(cuid())
  segmentId  String
  customerId String
  addedAt    DateTime        @default(now())
  customer   Customer        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  segment    CustomerSegment @relation(fields: [segmentId], references: [id], onDelete: Cascade)

  @@unique([segmentId, customerId])
  @@index([segmentId])
  @@index([customerId])
  @@map("customer_segment_members")
}

model CRMAutomation {
  id          String    @id @default(cuid())
  name        String
  description String?
  trigger     String
  conditions  Json?
  actions     Json
  active      Boolean   @default(true)
  lastRunAt   DateTime?
  runCount    Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([trigger])
  @@index([active])
  @@map("crm_automations")
}

model Guide {
  id                        String             @id @default(cuid())
  name                      String
  email                     String             @unique
  phone                     String
  languages                 String[]
  bio                       String?
  photoUrl                  String?
  certifications            String[]
  departmentId              String?
  active                    Boolean            @default(true)
  stripeConnectedAccountId  String?            @unique
  stripeAccountStatus       String?
  stripeAccountType         String?
  stripeOnboardingCompleted Boolean            @default(false)
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt
  availabilitySlots         AvailabilitySlot[]
  bookings                  Booking[]
  payrolls                  Payroll[]
  department                Department?        @relation(fields: [departmentId], references: [id])

  @@index([departmentId])
  @@map("guides")
}

model Integration {
  id        String   @id @default(cuid())
  kind      String
  name      String
  config    Json
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([kind, name])
  @@map("integrations")
}

model MessageThread {
  id         String    @id @default(cuid())
  customerId String?
  channel    String
  channelId  String
  status     String    @default("open")
  assignedTo String?
  tags       String[]
  metadata   Json?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  closedAt   DateTime?
  messages   Message[]

  @@unique([channel, channelId])
  @@index([customerId])
  @@index([status])
  @@map("message_threads")
}

model Message {
  id         String        @id @default(cuid())
  threadId   String
  customerId String?
  bookingId  String?
  direction  String
  channel    String
  content    String
  metadata   Json?
  sentBy     String?
  sentAt     DateTime      @default(now())
  readAt     DateTime?
  createdAt  DateTime      @default(now())
  booking    Booking?      @relation(fields: [bookingId], references: [id])
  customer   Customer?     @relation(fields: [customerId], references: [id])
  thread     MessageThread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@index([threadId])
  @@index([customerId])
  @@index([bookingId])
  @@map("messages")
}

model AccountsPayable {
  id          String    @id @default(cuid())
  vendor      String
  description String?
  amount      Decimal   @db.Decimal(10, 2)
  currency    String    @default("EUR")
  dueDate     DateTime
  status      String    @default("open")
  paidAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([status])
  @@index([dueDate])
  @@map("accounts_payable")
}

model AccountsReceivable {
  id          String    @id @default(cuid())
  customerId  String
  description String?
  amount      Decimal   @db.Decimal(10, 2)
  currency    String    @default("EUR")
  dueDate     DateTime
  status      String    @default("open")
  paidAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  customer    Customer  @relation(fields: [customerId], references: [id])

  @@index([customerId])
  @@index([status])
  @@index([dueDate])
  @@map("accounts_receivable")
}

model Account {
  id            String        @id @default(cuid())
  code          String        @unique
  name          String
  type          String
  category      String?
  balance       Decimal       @default(0) @db.Decimal(10, 2)
  currency      String        @default("EUR")
  active        Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  ledgerEntries LedgerEntry[]

  @@index([type])
  @@index([code])
  @@map("accounts")
}

model LedgerEntry {
  id              String   @id @default(cuid())
  accountId       String
  transactionId   String
  transactionType String
  description     String?
  debit           Decimal  @default(0) @db.Decimal(10, 2)
  credit          Decimal  @default(0) @db.Decimal(10, 2)
  currency        String   @default("EUR")
  metadata        Json?
  createdAt       DateTime @default(now())
  account         Account  @relation(fields: [accountId], references: [id])

  @@index([accountId])
  @@index([transactionId])
  @@index([transactionType])
  @@map("ledger_entries")
}

model Payroll {
  id               String    @id @default(cuid())
  staffId          String?
  guideId          String?
  vendorId         String?
  payrollType      String
  period           String
  periodStart      DateTime
  periodEnd        DateTime
  grossAmount      Decimal   @db.Decimal(10, 2)
  deductions       Decimal   @default(0) @db.Decimal(10, 2)
  netAmount        Decimal   @db.Decimal(10, 2)
  currency         String    @default("EUR")
  status           String    @default("pending")
  paidAt           DateTime?
  paymentMethod    String?
  stripeTransferId String?   @unique
  stripePayoutId   String?   @unique
  notes            String?
  metadata         Json?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  guide            Guide?    @relation(fields: [guideId], references: [id])
  staff            Staff?    @relation(fields: [staffId], references: [id])
  vendor           Vendor?   @relation(fields: [vendorId], references: [id])

  @@index([staffId])
  @@index([guideId])
  @@index([vendorId])
  @@index([status])
  @@index([periodStart])
  @@map("payroll")
}

model AuroraConversation {
  id                String   @id @default(cuid())
  customerId        String?
  sessionId         String   @unique
  channel           String
  locale            String   @default("en")
  context           Json?
  sentiment         String?
  intent            String?
  conversationState Json?
  lastMessageAt     DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([customerId])
  @@index([channel])
  @@map("aurora_conversations")
}

model AuroraKnowledge {
  id          String                 @id @default(cuid())
  category    String
  questionEn  String
  questionPt  String
  questionEs  String
  answerEn    String
  answerPt    String
  answerEs    String
  embeddingEn Unsupported("vector")?
  embeddingPt Unsupported("vector")?
  embeddingEs Unsupported("vector")?
  tags        String[]
  priority    Int                    @default(0)
  active      Boolean                @default(true)
  usageCount  Int                    @default(0)
  lastUsedAt  DateTime?
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt

  @@index([category])
  @@index([tags])
  @@map("aurora_knowledge")
}

model AuroraConfig {
  id                   String   @id @default(cuid())
  name                 String   @unique
  autonomyLevel        String   @default("assisted")
  maxBookingValue      Decimal  @default(500) @db.Decimal(10, 2)
  requireHumanApproval Boolean  @default(true)
  affectiveActivation  Decimal  @default(0.7) @db.Decimal(3, 2)
  affectiveCordial     Decimal  @default(0.9) @db.Decimal(3, 2)
  affectiveSincerity   Decimal  @default(0.85) @db.Decimal(3, 2)
  learningRate         Decimal  @default(0.3) @db.Decimal(3, 2)
  emotionalMemory      Json?
  behaviorSettings     Json?
  handoffThreshold     Decimal  @default(0.5) @db.Decimal(3, 2)
  empathyLevel         Int      @default(7)
  debugMode            Boolean  @default(false)
  active               Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@map("aurora_configs")
}

model AuroraSensoryContext {
  id        String   @id @default(cuid())
  sessionId String
  content   String
  metadata  Json?
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([sessionId])
  @@index([expiresAt])
  @@map("aurora_sensory_context")
}

model AuroraWorkingMemory {
  id             String   @id @default(cuid())
  sessionId      String
  conversationId String?
  contextWindow  Json
  activeEntities Json?
  currentIntent  String?
  emotionalState Json?
  createdAt      DateTime @default(now())
  expiresAt      DateTime

  @@index([sessionId])
  @@index([conversationId])
  @@index([expiresAt])
  @@map("aurora_working_memory")
}

model AuroraEpisodicMemory {
  id              String    @id @default(cuid())
  customerId      String?
  sessionId       String
  conversationId  String?
  eventType       String
  content         String
  emotionalVector Json
  outcome         String?
  importance      Decimal   @default(0.5) @db.Decimal(3, 2)
  anonymizedAt    DateTime?
  metadata        Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([customerId])
  @@index([sessionId])
  @@index([conversationId])
  @@index([eventType])
  @@index([createdAt])
  @@map("aurora_episodic_memory")
}

model AuroraSemanticMemory {
  id          String                 @id @default(cuid())
  contentEn   String
  contentPt   String
  contentEs   String
  embeddingEn Unsupported("vector")?
  embeddingPt Unsupported("vector")?
  embeddingEs Unsupported("vector")?
  category    String
  subcategory String?
  tags        String[]
  sourceType  String
  sourceId    String?
  confidence  Decimal                @default(1.0) @db.Decimal(3, 2)
  usageCount  Int                    @default(0)
  lastUsedAt  DateTime?
  version     Int                    @default(1)
  active      Boolean                @default(true)
  metadata    Json?
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt

  @@index([category])
  @@index([tags])
  @@index([sourceType, sourceId])
  @@index([active])
  @@map("aurora_semantic_memory")
}

model AuroraProceduralMemory {
  id             String    @id @default(cuid())
  procedureName  String
  version        Int
  trigger        String
  conditions     Json
  actions        Json
  priority       Int       @default(0)
  successRate    Decimal   @default(0) @db.Decimal(5, 2)
  executionCount Int       @default(0)
  lastExecutedAt DateTime?
  active         Boolean   @default(true)
  metadata       Json?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@unique([procedureName, version])
  @@index([procedureName])
  @@index([trigger])
  @@index([active])
  @@map("aurora_procedural_memory")
}

model AuroraAggregateMemory {
  id          String   @id @default(cuid())
  periodType  String
  periodStart DateTime
  periodEnd   DateTime
  metric      String
  value       Decimal  @db.Decimal(10, 2)
  count       Int
  metadata    Json?
  createdAt   DateTime @default(now())

  @@unique([periodType, periodStart, metric])
  @@index([periodType])
  @@index([periodStart])
  @@index([metric])
  @@map("aurora_aggregate_memory")
}

model AuroraTemplateMemory {
  id           String    @id @default(cuid())
  templateName String
  locale       String
  category     String
  templateText String
  variables    String[]
  usageCount   Int       @default(0)
  lastUsedAt   DateTime?
  active       Boolean   @default(true)
  metadata     Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([templateName, locale])
  @@index([category])
  @@index([locale])
  @@index([active])
  @@map("aurora_template_memory")
}

model AuroraLead {
  id             String    @id @default(cuid())
  customerId     String?
  conversationId String?
  name           String?
  email          String?
  phone          String?
  whatsapp       String?
  channel        String
  channelId      String?
  interest       String?
  status         String    @default("new")
  emotionalState Json?
  notes          String?
  assignedTo     String?
  convertedAt    DateTime?
  metadata       Json?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([customerId])
  @@index([conversationId])
  @@index([channel])
  @@index([status])
  @@index([createdAt])
  @@map("aurora_leads")
}

model AuroraHandoff {
  id             String    @id @default(cuid())
  conversationId String
  leadId         String?
  reason         String
  emotionalState Json?
  confidence     Decimal   @db.Decimal(3, 2)
  assignedTo     String?
  status         String    @default("pending")
  acceptedAt     DateTime?
  acceptedBy     String?
  resolvedAt     DateTime?
  notes          String?
  metadata       Json?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([conversationId])
  @@index([leadId])
  @@index([status])
  @@index([assignedTo])
  @@index([createdAt])
  @@map("aurora_handoffs")
}

model Fleet {
  id                String    @id @default(cuid())
  vehicleType       String
  licensePlate      String    @unique
  model             String
  year              Int
  color             String?
  capacity          Int       @default(6)
  batteryCapacity   Int?
  batteryHealth     Int?
  lastMaintenanceAt DateTime?
  nextMaintenanceAt DateTime?
  mileage           Int       @default(0)
  insuranceExpiry   DateTime?
  status            String    @default("active")
  notes             String?
  imageUrl          String?
  active            Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([status])
  @@index([vehicleType])
  @@map("fleet")
}

model MonumentTicket {
  id                       String    @id @default(cuid())
  bookingId                String?
  monumentId               String
  monumentName             String
  ticketType               String
  numberOfTickets          Int
  priceEur                 Decimal   @db.Decimal(10, 2)
  visitDate                DateTime
  externalBookingReference String?
  provider                 String    @default("parques_sintra")
  status                   String    @default("pending")
  rawResponse              Json?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  purchasedAt              DateTime?
  cancelledAt              DateTime?

  @@index([bookingId])
  @@index([visitDate])
  @@index([monumentId])
  @@index([status])
  @@map("monument_tickets")
}

model MonumentTicketAvailability {
  id             String   @id @default(cuid())
  monumentId     String
  provider       String
  date           DateTime
  available      Boolean  @default(true)
  totalCapacity  Int
  remainingSlots Int
  priceEur       Decimal  @db.Decimal(10, 2)
  status         String   @default("active")
  rawResponse    Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([monumentId, date, provider])
  @@index([monumentId])
  @@index([date])
  @@index([provider])
  @@map("monument_ticket_availability")
}

model Review {
  id           String    @id @default(cuid())
  bookingId    String    @unique
  customerId   String
  productId    String
  rating       Int
  npsScore     Int?
  comment      String?
  language     String    @default("en")
  helpful      Int       @default(0)
  source       String?
  publishedAt  DateTime?
  moderatedBy  String?
  status       String    @default("pending")
  responseText String?
  respondedAt  DateTime?
  respondedBy  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  booking      Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([customerId])
  @@index([rating])
  @@index([status])
  @@map("reviews")
}

model SystemLog {
  id         String   @id @default(cuid())
  level      String
  category   String
  action     String
  userId     String?
  entityType String?
  entityId   String?
  message    String
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  @@index([level])
  @@index([category])
  @@index([userId])
  @@index([entityType, entityId])
  @@index([createdAt])
  @@map("system_logs")
}

model CustomerAuth {
  id           String    @id @default(cuid())
  customerId   String    @unique
  email        String    @unique
  passwordHash String
  verified     Boolean   @default(false)
  verifiedAt   DateTime?
  resetToken   String?
  resetExpiry  DateTime?
  lastLoginAt  DateTime?
  loginCount   Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  customer     Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([email])
  @@map("customer_auth")
}

model TourAddon {
  id            String         @id @default(cuid())
  code          String         @unique
  nameEn        String
  namePt        String
  nameEs        String
  descriptionEn String
  descriptionPt String
  descriptionEs String
  priceEur      Decimal        @db.Decimal(10, 2)
  priceType     String         @default("per_person")
  category      String
  imageUrl      String?
  active        Boolean        @default(true)
  sortOrder     Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  bookingAddons BookingAddon[]

  @@index([category])
  @@index([active])
  @@map("tour_addons")
}

model BookingAddon {
  id        String    @id @default(cuid())
  bookingId String
  addonId   String
  quantity  Int       @default(1)
  priceEur  Decimal   @db.Decimal(10, 2)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  addon     TourAddon @relation(fields: [addonId], references: [id])
  booking   Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId])
  @@index([addonId])
  @@map("booking_addons")
}

enum UserRole {
  admin
  director
  manager
  finance
  support
  guide
  staff
}

model EmailTemplate {
  id          String   @id @default(cuid())
  name        String
  templateKey String   @unique
  subjectEn   String
  subjectPt   String
  subjectEs   String
  bodyEn      String
  bodyPt      String
  bodyEs      String
  category    String
  variables   String[]
  enabled     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@index([enabled])
  @@map("email_templates")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  userEmail  String?
  action     String
  entityType String
  entityId   String?
  changes    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([entityType])
  @@index([createdAt])
  @@map("audit_logs")
}

model Staff {
  id                        String      @id @default(cuid())
  name                      String
  email                     String      @unique
  passwordHash              String?
  phone                     String?
  position                  String
  department                String?
  departmentId              String?
  hireDate                  DateTime
  salary                    Decimal?    @db.Decimal(10, 2)
  salaryCurrency            String      @default("EUR")
  contractType              String      @default("full-time")
  status                    String      @default("active")
  photoUrl                  String?
  bio                       String?
  permissions               Json?
  role                      UserRole    @default(support)
  canAccessModules          String[]
  accessLevel               String      @default("read")
  notes                     String?
  stripeConnectedAccountId  String?     @unique
  stripeAccountStatus       String?
  stripeAccountType         String?
  stripeOnboardingCompleted Boolean     @default(false)
  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime    @updatedAt
  payrolls                  Payroll[]
  departmentRel             Department? @relation(fields: [departmentId], references: [id])

  @@index([email])
  @@index([status])
  @@index([department])
  @@index([departmentId])
  @@map("staff")
}

model Vendor {
  id                        String    @id @default(cuid())
  name                      String
  companyName               String?
  email                     String
  phone                     String?
  address                   String?
  taxId                     String?
  category                  String
  bankAccount               String?
  paymentTerms              String?
  notes                     String?
  status                    String    @default("active")
  totalPaid                 Decimal   @default(0) @db.Decimal(10, 2)
  currency                  String    @default("EUR")
  stripeConnectedAccountId  String?   @unique
  stripeAccountStatus       String?
  stripeAccountType         String?
  stripeOnboardingCompleted Boolean   @default(false)
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  payrolls                  Payroll[]

  @@index([email])
  @@index([status])
  @@index([category])
  @@map("vendors")
}

model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  email       String?  @unique
  description String?
  color       String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  staff       Staff[]
  guides      Guide[]

  @@index([name])
  @@map("departments")
}

model InternalMessage {
  id               String    @id @default(cuid())
  senderId         String
  senderName       String
  senderRole       UserRole
  recipientType    String
  recipientIds     String[]
  departmentTarget String?
  subject          String?
  content          String
  read             Boolean   @default(false)
  readBy           String[]
  readAt           DateTime?
  metadata         Json?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@index([senderId])
  @@index([recipientType])
  @@index([departmentTarget])
  @@index([createdAt])
  @@map("internal_messages")
}

model Notification {
  id         String    @id @default(cuid())
  userId     String
  userType   String
  type       String
  title      String
  message    String
  metadata   Json?
  read       Boolean   @default(false)
  readAt     DateTime?
  actionUrl  String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([userId])
  @@index([userType])
  @@index([type])
  @@index([read])
  @@index([createdAt])
  @@map("notifications")
}

model EmailMessage {
  id            String    @id @default(cuid())
  fromEmail     String
  toEmail       String
  ccEmails      String[]
  bccEmails     String[]
  subject       String
  bodyText      String?
  bodyHtml      String?
  folder        String    @default("sent")
  read          Boolean   @default(false)
  starred       Boolean   @default(false)
  labels        String[]
  metadata      Json?
  sentAt        DateTime?
  receivedAt    DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([fromEmail])
  @@index([toEmail])
  @@index([folder])
  @@index([read])
  @@index([sentAt])
  @@index([receivedAt])
  @@map("email_messages")
}

model ScheduledTask {
  id          String    @id @default(cuid())
  taskType    String
  entityId    String
  entityType  String?
  scheduledFor DateTime
  executed    Boolean   @default(false)
  executedAt  DateTime?
  metadata    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([taskType])
  @@index([scheduledFor])
  @@index([executed])
  @@map("scheduled_tasks")
}
