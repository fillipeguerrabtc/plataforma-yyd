generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  director
  guide
  finance
  support
}

model User {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.VarChar
  email        String    @unique @db.VarChar(255)
  name         String    @db.VarChar(255)
  passwordHash String    @db.VarChar(255)
  role         UserRole  @default(guide)
  active       Boolean   @default(true)
  lastLoginAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  @@index([email])
  @@index([role])
}

model Product {
  id               String                 @id @default(cuid())
  slug             String                 @unique
  titleEn          String
  titlePt          String
  titleEs          String
  descriptionEn    String                 @db.Text
  descriptionPt    String                 @db.Text
  descriptionEs    String                 @db.Text
  durationHours    Int
  maxGroupSize     Int                    @default(36)
  categoryEn       String
  categoryPt       String
  categoryEs       String
  featuresEn       String[]
  featuresPt       String[]
  featuresEs       String[]
  excludedEn       String[]
  excludedPt       String[]
  excludedEs       String[]
  imageUrls        String[]
  highlightedEn    String?
  highlightedPt    String?
  highlightedEs    String?
  bestChoice       Boolean                @default(false)
  active           Boolean                @default(true)
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  seasonPrices     ProductSeasonPrice[]
  options          ProductOption[]
  activities       ProductActivity[]
  bookings         Booking[]
  availability     AvailabilitySlot[]

  @@map("products")
}

model ProductSeasonPrice {
  id            String   @id @default(cuid())
  productId     String
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  season        String
  startMonth    Int
  endMonth      Int
  tier          String
  minPeople     Int
  maxPeople     Int?
  priceEur      Decimal  @db.Decimal(10, 2)
  pricePerPerson Boolean @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([productId, season, tier])
  @@index([productId])
  @@map("product_season_prices")
}

model ProductOption {
  id            String   @id @default(cuid())
  productId     String
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  nameEn        String
  namePt        String
  nameEs        String
  descriptionEn String   @db.Text
  descriptionPt String   @db.Text
  descriptionEs String   @db.Text
  sortOrder     Int      @default(0)
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([productId])
  @@map("product_options")
}

model ProductActivity {
  id            String   @id @default(cuid())
  productId     String
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  nameEn        String
  namePt        String
  nameEs        String
  descriptionEn String   @db.Text
  descriptionPt String   @db.Text
  descriptionEs String   @db.Text
  imageUrl      String?
  sortOrder     Int      @default(0)
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([productId])
  @@map("product_activities")
}

model AvailabilitySlot {
  id         String   @id @default(cuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  date       DateTime
  startTime  String
  endTime    String
  maxSlots   Int      @default(1)
  bookedSlots Int     @default(0)
  status     String   @default("available")
  guideId    String?
  guide      Guide?   @relation(fields: [guideId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([productId, date, startTime])
  @@index([productId, date])
  @@index([guideId])
  @@map("availability_slots")
}

model Booking {
  id               String    @id @default(cuid())
  bookingNumber    String    @unique
  customerId       String
  customer         Customer  @relation(fields: [customerId], references: [id])
  productId        String
  product          Product   @relation(fields: [productId], references: [id])
  date             DateTime
  startTime        String
  numberOfPeople   Int
  selectedOption   String?
  selectedActivities String[]
  status           String    @default("pending")
  season           String
  priceEur         Decimal   @db.Decimal(10, 2)
  currency         String    @default("EUR")
  locale           String    @default("en")
  pickupLocation   String?
  dropoffLocation  String?
  specialRequests  String?   @db.Text
  guideId          String?
  guide            Guide?    @relation(fields: [guideId], references: [id])
  payments         Payment[]
  messages         Message[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  confirmedAt      DateTime?
  completedAt      DateTime?
  cancelledAt      DateTime?

  @@index([customerId])
  @@index([productId])
  @@index([date])
  @@index([status])
  @@index([guideId])
  @@map("bookings")
}

model Payment {
  id                  String   @id @default(cuid())
  bookingId           String
  booking             Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  stripePaymentIntent String?  @unique
  stripeChargeId      String?
  amount              Decimal  @db.Decimal(10, 2)
  currency            String   @default("EUR")
  status              String   @default("pending")
  paymentMethod       String?
  metadata            Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  paidAt              DateTime?
  refundedAt          DateTime?

  @@index([bookingId])
  @@index([stripePaymentIntent])
  @@index([status])
  @@map("payments")
}

model Customer {
  id                  String                @id @default(cuid())
  name                String
  email               String                @unique
  phone               String?
  whatsapp            String?
  locale              String                @default("en")
  country             String?
  source              String?
  tags                String[]
  notes               String?               @db.Text
  totalBookings       Int                   @default(0)
  totalSpent          Decimal               @default(0) @db.Decimal(10, 2)
  lastBookingAt       DateTime?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  bookings            Booking[]
  accountsReceivable  AccountsReceivable[]
  messages            Message[]
  auth                CustomerAuth?

  @@index([email])
  @@index([phone])
  @@map("customers")
}

model Guide {
  id               String             @id @default(cuid())
  name             String
  email            String             @unique
  phone            String
  languages        String[]
  bio              String?            @db.Text
  photoUrl         String?
  certifications   String[]
  active           Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  bookings         Booking[]
  availabilitySlots AvailabilitySlot[]

  @@map("guides")
}

model Integration {
  id        String   @id @default(cuid())
  kind      String
  name      String
  config    Json
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([kind, name])
  @@map("integrations")
}

model MessageThread {
  id          String    @id @default(cuid())
  customerId  String?
  channel     String
  channelId   String
  status      String    @default("open")
  assignedTo  String?
  tags        String[]
  metadata    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  closedAt    DateTime?
  messages    Message[]

  @@unique([channel, channelId])
  @@index([customerId])
  @@index([status])
  @@map("message_threads")
}

model Message {
  id            String         @id @default(cuid())
  threadId      String
  thread        MessageThread  @relation(fields: [threadId], references: [id], onDelete: Cascade)
  customerId    String?
  customer      Customer?      @relation(fields: [customerId], references: [id])
  bookingId     String?
  booking       Booking?       @relation(fields: [bookingId], references: [id])
  direction     String
  channel       String
  content       String         @db.Text
  metadata      Json?
  sentBy        String?
  sentAt        DateTime       @default(now())
  readAt        DateTime?
  createdAt     DateTime       @default(now())

  @@index([threadId])
  @@index([customerId])
  @@index([bookingId])
  @@map("messages")
}

model AccountsPayable {
  id          String   @id @default(cuid())
  vendor      String
  description String?  @db.Text
  amount      Decimal  @db.Decimal(10, 2)
  currency    String   @default("EUR")
  dueDate     DateTime
  status      String   @default("open")
  paidAt      DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([status])
  @@index([dueDate])
  @@map("accounts_payable")
}

model AccountsReceivable {
  id         String    @id @default(cuid())
  customerId String
  customer   Customer  @relation(fields: [customerId], references: [id])
  description String?  @db.Text
  amount     Decimal   @db.Decimal(10, 2)
  currency   String    @default("EUR")
  dueDate    DateTime
  status     String    @default("open")
  paidAt     DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([customerId])
  @@index([status])
  @@index([dueDate])
  @@map("accounts_receivable")
}

model AuroraConversation {
  id              String   @id @default(cuid())
  customerId      String?
  sessionId       String   @unique
  channel         String
  locale          String   @default("en")
  context         Json?
  sentiment       String?
  intent          String?
  conversationState Json?
  lastMessageAt   DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([customerId])
  @@index([channel])
  @@map("aurora_conversations")
}

model AuroraKnowledge {
  id          String   @id @default(cuid())
  category    String
  questionEn  String   @db.Text
  questionPt  String   @db.Text
  questionEs  String   @db.Text
  answerEn    String   @db.Text
  answerPt    String   @db.Text
  answerEs    String   @db.Text
  tags        String[]
  priority    Int      @default(0)
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@index([tags])
  @@map("aurora_knowledge")
}

model AuroraConfig {
  id                   String   @id @default(cuid())
  name                 String   @unique
  autonomyLevel        String   @default("assisted")
  maxBookingValue      Decimal  @default(500) @db.Decimal(10, 2)
  requireHumanApproval Boolean  @default(true)
  affectiveActivation  Decimal  @default(0.7) @db.Decimal(3, 2)
  affectiveCordial     Decimal  @default(0.9) @db.Decimal(3, 2)
  affectiveSincerity   Decimal  @default(0.85) @db.Decimal(3, 2)
  learningRate         Decimal  @default(0.3) @db.Decimal(3, 2)
  emotionalMemory      Json?
  behaviorSettings     Json?
  active               Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@map("aurora_configs")
}

model Fleet {
  id                String    @id @default(cuid())
  vehicleType       String
  licensePlate      String    @unique
  model             String
  year              Int
  color             String?
  capacity          Int       @default(6)
  batteryCapacity   Int?
  batteryHealth     Int?
  lastMaintenanceAt DateTime?
  nextMaintenanceAt DateTime?
  mileage           Int       @default(0)
  insuranceExpiry   DateTime?
  status            String    @default("active")
  notes             String?   @db.Text
  imageUrl          String?
  active            Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([status])
  @@index([vehicleType])
  @@map("fleet")
}

model MonumentTicket {
  id                String   @id @default(cuid())
  bookingId         String?
  monumentName      String
  ticketType        String
  quantity          Int
  priceEur          Decimal  @db.Decimal(10, 2)
  visitDate         DateTime
  ticketReference   String?
  provider          String   @default("parques_sintra")
  status            String   @default("pending")
  externalData      Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  purchasedAt       DateTime?
  cancelledAt       DateTime?

  @@index([bookingId])
  @@index([visitDate])
  @@index([status])
  @@map("monument_tickets")
}

model Review {
  id             String   @id @default(cuid())
  bookingId      String   @unique
  customerId     String
  productId      String
  rating         Int
  npsScore       Int?
  comment        String?  @db.Text
  language       String   @default("en")
  helpful        Int      @default(0)
  source         String?
  publishedAt    DateTime?
  moderatedBy    String?
  status         String   @default("pending")
  responseText   String?  @db.Text
  respondedAt    DateTime?
  respondedBy    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([productId])
  @@index([customerId])
  @@index([rating])
  @@index([status])
  @@map("reviews")
}

model SystemLog {
  id         String   @id @default(cuid())
  level      String
  category   String
  action     String
  userId     String?
  entityType String?
  entityId   String?
  message    String   @db.Text
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  @@index([level])
  @@index([category])
  @@index([userId])
  @@index([entityType, entityId])
  @@index([createdAt])
  @@map("system_logs")
}

model CustomerAuth {
  id           String    @id @default(cuid())
  customerId   String    @unique
  customer     Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  email        String    @unique
  passwordHash String
  verified     Boolean   @default(false)
  verifiedAt   DateTime?
  resetToken   String?
  resetExpiry  DateTime?
  lastLoginAt  DateTime?
  loginCount   Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([email])
  @@map("customer_auth")
}
